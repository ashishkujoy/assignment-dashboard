[
  {
    "name": "ends_with",
    "file": "01_ends_with.js",
    "fnName": "endsWith",
    "args": ["string", "substring"],
    "cases": [
      {
        "desc": "Basic ends with",
        "inputs": {
          "string": "hello world",
          "substring": "world"
        },
        "expected": true
      },
      {
        "desc": "Does not end with",
        "inputs": {
          "string": "hello world",
          "substring": "hello"
        },
        "expected": false
      },
      {
        "desc": "Substring longer than text",
        "inputs": {
          "string": "hello",
          "substring": "hello world"
        },
        "expected": false
      },
      {
        "desc": "Case-sensitive ends with",
        "inputs": {
          "string": "Hello World",
          "substring": "world"
        },
        "expected": false
      },
      {
        "desc": "Ends with special characters",
        "inputs": {
          "string": "hello, world!",
          "substring": "world!"
        },
        "expected": true
      },
      {
        "desc": "Ends with multiple characters",
        "inputs": {
          "string": "hello world",
          "substring": "ld"
        },
        "expected": true
      },
      {
        "desc": "Ends with single character",
        "inputs": {
          "string": "hello world",
          "substring": "d"
        },
        "expected": true
      }
    ]
  },
  {
    "name": "find_index",
    "file": "02_find_index.js",
    "fnName": "findIndex",
    "args": ["text", "target"],
    "cases": [
      {
        "desc": "Basic find",
        "inputs": {
          "text": "hello world",
          "target": "o"
        },
        "expected": 4
      },
      {
        "desc": "Character not found",
        "inputs": {
          "text": "hello world",
          "target": "z"
        },
        "expected": -1
      },
      {
        "desc": "Multiple occurrences",
        "inputs": {
          "text": "Mississippi",
          "target": "s"
        },
        "expected": 2
      },
      {
        "desc": "Empty string",
        "inputs": {
          "text": "",
          "target": "a"
        },
        "expected": -1
      },
      {
        "desc": "Character at beginning",
        "inputs": {
          "text": "hello world",
          "target": "h"
        },
        "expected": 0
      },
      {
        "desc": "Character at end",
        "inputs": {
          "text": "hello world",
          "target": "d"
        },
        "expected": 10
      },
      {
        "desc": "Large string",
        "inputs": {
          "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
          "target": "a"
        },
        "expected": 22
      },
      {
        "desc": "Multiple occurrences with special characters",
        "inputs": {
          "text": "This is a test with ***",
          "target": "*"
        },
        "expected": 20
      },
      {
        "desc": "Character not found with special characters",
        "inputs": {
          "text": "hello, world!",
          "target": "@"
        },
        "expected": -1
      }
    ]
  },
  {
    "name": "fizz_buzz",
    "file": "03_fizz_buzz.js",
    "fnName": "fizzBuzz",
    "args": ["number"],
    "cases": [
      {
        "desc": "Multiple of 3 and 5",
        "inputs": { "number": 15 },
        "expected": "fizzbuzz"
      },
      {
        "desc": "Multiple of 3",
        "inputs": { "number": 9 },
        "expected": "fizz"
      },
      {
        "desc": "Multiple of 5",
        "inputs": { "number": 25 },
        "expected": "buzz"
      },
      {
        "desc": "Not a multiple of 3 or 5",
        "inputs": { "number": 7 },
        "expected": "7"
      },
      {
        "desc": "Zero",
        "inputs": { "number": 0 },
        "expected": "fizzbuzz"
      },
      {
        "desc": "Large number",
        "inputs": { "number": 100000000 },
        "expected": "buzz"
      },
      {
        "desc": "Edge case: 1",
        "inputs": { "number": 1 },
        "expected": "1"
      },
      {
        "desc": "Edge case: 2",
        "inputs": { "number": 2 },
        "expected": "2"
      },
      {
        "desc": "Edge case: 3",
        "inputs": { "number": 3 },
        "expected": "fizz"
      }
    ]
  },
  {
    "name": "is_substring",
    "file": "04_is_substring.js",
    "fnName": "isSubstring",
    "args": ["text", "subString"],
    "cases": [
      {
        "desc": "Basic substring",
        "inputs": {
          "text": "hello world",
          "subString": "world"
        },
        "expected": true
      },
      {
        "desc": "Substring not found",
        "inputs": {
          "text": "hello world",
          "subString": "goodbye"
        },
        "expected": false
      },
      {
        "desc": "Substring at beginning",
        "inputs": {
          "text": "hello world",
          "subString": "hello"
        },
        "expected": true
      },
      {
        "desc": "Substring at end",
        "inputs": {
          "text": "hello world",
          "subString": "world"
        },
        "expected": true
      },
      {
        "desc": "Substring in the middle",
        "inputs": {
          "text": "hello world",
          "subString": "lo"
        },
        "expected": true
      },
      {
        "desc": "Substring is empty string",
        "inputs": {
          "text": "hello world",
          "subString": ""
        },
        "expected": false
      },
      {
        "desc": "Text is empty string",
        "inputs": {
          "text": "",
          "subString": "hello"
        },
        "expected": false
      },
      {
        "desc": "Substring is longer than text",
        "inputs": {
          "text": "hello",
          "subString": "hello world"
        },
        "expected": false
      },
      {
        "desc": "Substring is same as text",
        "inputs": {
          "text": "hello world",
          "subString": "hello world"
        },
        "expected": true
      },
      {
        "desc": "Case-insensitive substring",
        "inputs": {
          "text": "Hello World",
          "subString": "world"
        },
        "expected": false
      },
      {
        "desc": "Substring with special characters",
        "inputs": {
          "text": "hello, world!",
          "subString": ", world"
        },
        "expected": true
      }
    ]
  },
  {
    "name": "string_replace",
    "file": "05_string_replace.js",
    "fnName": "replace",
    "args": ["text", "target", "replacement"],
    "cases": [
      {
        "desc": "Basic replacement",
        "inputs": {
          "text": "hello world",
          "target": "o",
          "replacement": "a"
        },
        "expected": "hella warld"
      },
      {
        "desc": "Multiple replacements",
        "inputs": {
          "text": "Mississippi",
          "target": "s",
          "replacement": "x"
        },
        "expected": "Mixxixxippi"
      },
      {
        "desc": "No matches",
        "inputs": {
          "text": "abcdefg",
          "target": "z",
          "replacement": "x"
        },
        "expected": "abcdefg"
      },
      {
        "desc": "Empty string",
        "inputs": {
          "text": "",
          "target": "a",
          "replacement": "b"
        },
        "expected": ""
      },
      {
        "desc": "Match character is replacement character",
        "inputs": {
          "text": "aaa",
          "target": "a",
          "replacement": "a"
        },
        "expected": "aaa"
      },
      {
        "desc": "Match character is empty string",
        "inputs": {
          "text": "hello world",
          "target": "",
          "replacement": "x"
        },
        "expected": "hello world"
      },
      {
        "desc": "Replacement character is empty string",
        "inputs": {
          "text": "hello world",
          "target": "o",
          "replacement": ""
        },
        "expected": "hell wrld"
      },
      {
        "desc": "Large string",
        "inputs": {
          "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
          "target": "a",
          "replacement": "x"
        },
        "expected": "Lorem ipsum dolor sit xmet, consectetur xdipiscing elit."
      }
    ]
  },
  {
    "name": "string_slice",
    "file": "string_slice.js",
    "fnName": "slice",
    "args": ["text", "start", "end"],
    "cases": [
      {
        "inputs": { "text": "this is a statement", "start": 0, "end": 3 },
        "expected": "this",
        "desc": "Basic slicing within bounds"
      },
      {
        "inputs": { "text": "from middle till the end", "start": 5, "end": 23 },
        "expected": "middle till the end",
        "desc": "Slicing from middle to end"
      },
      {
        "inputs": { "text": "take middle part of me", "start": 5, "end": 15 },
        "expected": "middle part",
        "desc": "Slicing a middle portion"
      },
      {
        "inputs": { "text": "print me fully", "start": 0, "end": 13 },
        "expected": "print me fully",
        "desc": "Slicing the entire string"
      },
      {
        "inputs": { "text": "end is out of range", "start": 14, "end": 100 },
        "expected": "range",
        "desc": "Slicing with end index out of bounds"
      },
      {
        "inputs": { "text": "start is out of range", "start": 50, "end": 100 },
        "expected": "",
        "desc": "Slicing with start index out of bounds"
      },
      {
        "inputs": { "text": "", "start": 1, "end": 2 },
        "expected": "",
        "desc": "Slicing an empty string"
      },
      {
        "inputs": { "text": "start and end are same", "start": 10, "end": 10 },
        "expected": "e",
        "desc": "Slicing a single character"
      },
      {
        "inputs": {
          "text": "start range greater than end range",
          "start": 100,
          "end": 10
        },
        "expected": "",
        "desc": "Slicing with start index greater than end index"
      },
      {
        "inputs": {
          "text": "start range is negative index",
          "start": -2,
          "end": 10
        },
        "expected": "start range",
        "desc": "Slicing with negative start index"
      },
      {
        "inputs": {
          "text": "start range is negative index and end is greater than length",
          "start": -2,
          "end": 100
        },
        "expected": "start range is negative index and end is greater than length",
        "desc": "Slicing with negative start index and end index out of bounds"
      },
      {
        "inputs": { "text": "end is equal to length", "start": 3, "end": 22 },
        "expected": " is equal to length",
        "desc": "Slicing from a specific index to the end of the string"
      }
    ]
  },
  {
    "name": "substring_count",
    "file": "substring_count.js",
    "fnName": "occurrences",
    "args": ["string", "substring"],
    "cases": [
      {
        "inputs": {
          "string": "This is a rising issue in istanbul",
          "substring": "is"
        },
        "expected": 5,
        "desc": "Multiple occurrences of a substring"
      },
      {
        "inputs": {
          "string": "This is a rising issue in istanbul",
          "substring": "i"
        },
        "expected": 7,
        "desc": "Multiple occurrences of a single character substring"
      },
      {
        "inputs": {
          "string": "single occurence of substring",
          "substring": "of"
        },
        "expected": 1,
        "desc": "Single occurrence of a substring"
      },
      {
        "inputs": {
          "string": "I don't have expected substring",
          "substring": "is"
        },
        "expected": 0,
        "desc": "No occurrence of a substring"
      },
      {
        "inputs": { "string": "hahahaha", "substring": "haha" },
        "expected": 3,
        "desc": "Multiple overlapping occurrences of a substring"
      },
      {
        "inputs": {
          "string": "I contain case sensitive subString",
          "substring": "ubS"
        },
        "expected": 1,
        "desc": "Case-sensitive substring match"
      },
      {
        "inputs": {
          "string": "I don't have case sensitive substring",
          "substring": "ubS"
        },
        "expected": 0,
        "desc": "Case-sensitive substring mismatch"
      }
    ]
  },
  {
    "name": "temperature_conversion",
    "file": "temperature_conversion.js",
    "fnName": "convert",
    "args": ["from", "to", "value"],
    "cases": [
      {
        "desc": "Celsius to Kelvin",
        "inputs": {
          "from": "C",
          "to": "K",
          "value": 0
        },
        "expected": 273.15
      },
      {
        "desc": "Celsius to Fahrenheit",
        "inputs": {
          "from": "C",
          "to": "F",
          "value": 37
        },
        "expected": 98.6
      },
      {
        "desc": "Fahrenheit to Kelvin",
        "inputs": {
          "from": "F",
          "to": "K",
          "value": 98.6
        },
        "expected": 310.15
      },
      {
        "desc": "Fahrenheit to Celsius for -40",
        "inputs": {
          "from": "F",
          "to": "C",
          "value": -40
        },
        "expected": -40
      },
      {
        "desc": "Kelvin to Celsius",
        "inputs": {
          "from": "K",
          "to": "C",
          "value": 100
        },
        "expected": -173.15
      },
      {
        "desc": "Kelvin to Fahrenheit",
        "inputs": {
          "from": "K",
          "to": "F",
          "value": 100
        },
        "expected": -279.67
      },
      {
        "desc": "Same units",
        "inputs": {
          "from": "C",
          "to": "C",
          "value": 0
        },
        "expected": 0
      },
      {
        "desc": "Negative temperature",
        "inputs": {
          "from": "C",
          "to": "K",
          "value": -10
        },
        "expected": 263.15
      },
      {
        "desc": "Absolute zero",
        "inputs": {
          "from": "K",
          "to": "C",
          "value": 0
        },
        "expected": -273.15
      },
      {
        "desc": "Same invalid units for from and to",
        "inputs": {
          "from": "C",
          "to": "K",
          "value": "0"
        },
        "expected": 273.15
      }
    ]
  }
]
